The Docs directory is a reference for the development team. It should have an organized hierarchy to store both design documents and technical specifications. I always put a copy of the contract exhibits and milestone acceptance criteria in it for my team, since these documents specify our obligations to the publisher or investor. (You don’t want to ever forget who is paying the bills!) While I’m developing a project, it’s not unusual to find detailed character scripts, initial user interface designs, and other works in progress in the Docs directory.

The Assets directory is going to store all your art, animation, and sound assets in their raw, naked form. This directory is likely going to get huge, so make sure the source control system is configured to filter it out for people who don’t care about it. I say “raw” and “naked” not just because I enjoy putting it in print—these assets are those not used by the game directly, but those that are used by artists, designers, or sound engineers while they are working on them. Think of it as the same kind of directory that programmers use for their code. When the assets get imported or packed into game files that are used by the game directly, they’ll be inside the Game directory where all the distributable stuff lives. One more thing—the Assets directory will be a huge, complicated hierarchy that will most likely be created to appease the whims of artists or sound engineers, so don’t expect to have much control over it.

The source code lives in the Source directory. It should be organized by the programmers in whatever manner they see fit. The project’s solution file or makefile should also reside in the Source directory and be named according to the code word for the project. The rest of the source code should be organized into other directories below Source. When a project is being built, each build target will place temporary files into the Temp directory. Each build project, building configuration, and platform can be segregated into their own directories underneath Temp. For example, the OBJ and other temporary files for the Debug configuration of the GameCode4 project compiled with Visual Studio 2010 for Win32 can be stored in Temp\GameCode4_2010Win32Debug. Doing it this way makes it very easy to create a directory structure that supports multiple compiled targets, multiple compilers, multiple platforms, and multiple build configurations.

The Game directory should hold the release build and every game data file your game needs to run and anything that will get distributed to your players. You should be able to send the contents of the Game directory to a separate testing group or to someone in the press, and they’d have everything they would need to run and test the game

The Test directory should hold special files only for the test team. It usually contains test scripts, files that unlock cheats, and test utilities. Some games have a logging feature that writes diagnostic, warning, and error messages to a text file—the Test directory is a great place for them